pragma solidity ^0.8.17;

import "openzeppelin-contracts/contracts/access/Ownable.sol";
import "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol";
import "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";


contract HankoCho is ERC721, Ownable {

     constructor(
         string memory name,
         string memory symbol
     ) ERC721(name, symbol) {}

    /**
     * @dev Current supply.
     */
    uint256 public totalSupply = 0;

    /**
     * @dev Max supply.
     */
    uint256 public MAX_SUPPLY = 1000;

    /**
     * @dev Burns `tokenId`. See {ERC721-_burn}.
     *
     * Requirements:
     *
     * - The caller must own `tokenId` or be an approved operator.
     */
    function burn(uint256 tokenId) external onlyOwner{
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
        _burn(tokenId);
    }

     /**
     * @dev Mint NFT to input address.
     * @param to is mint address.
     */
    function mint(
        address to
    )
        external
        onlyOwner
    {
        require(totalSupply <= MAX_SUPPLY, "Max supply exceeded");
        _mint(to, totalSupply);
        ++totalSupply;
    }

    /**
     * @dev ERC20s should not be sent to this contract, but if someone does, it's nice to be able to recover them.
     *      Copied from ForgottenRunesWarriorsGuild. Thank you dotta ;)
     * @param token IERC20 the token address
     * @param amount uint256 the amount to send
     */
    function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {
        token.transfer(msg.sender, amount);
    }

}
